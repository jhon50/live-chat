 require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/rooms", type: :request do
  include Devise::Test::IntegrationHelpers

  before do
    sign_in create(:user)
  end

  # Room. As you add validations to Room, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    { name: 'default' }
  }

  let(:invalid_attributes) {
    { name: '' }
  }

  describe "GET /index" do
    it "renders a successful response" do
      Room.create! valid_attributes
      get rooms_url
      expect(response).to be_successful
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      room = Room.create! valid_attributes
      get room_url(room)
      expect(response).to be_successful
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_room_url
      expect(response).to be_successful
    end
  end

  describe "GET /edit" do
    it "render a successful response" do
      room = Room.create! valid_attributes
      get edit_room_url(room)
      expect(response).to be_successful
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Room" do
        expect {
          post rooms_url, params: { room: valid_attributes }
        }.to change(Room, :count).by(1)
      end

      it "redirects to the created room" do
        post rooms_url, params: { room: valid_attributes }
        expect(response).to redirect_to(room_url(Room.last))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Room" do
        expect {
          post rooms_url, params: { room: invalid_attributes }
        }.to change(Room, :count).by(0)
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested room" do
      room = Room.create! valid_attributes
      expect {
        delete room_url(room)
      }.to change(Room, :count).by(-1)
    end

    it "redirects to the rooms list" do
      room = Room.create! valid_attributes
      delete room_url(room)
      expect(response).to redirect_to(rooms_url)
    end
  end
end
